@page "/qr"
@using SkiaSharp
@using SkiaSharp.QrCode
@using SkiaSharp.QrCode.Image
@using SkiaSharp.Views.Blazor
@using Microsoft.Fast.Components.FluentUI
@using System.ComponentModel.DataAnnotations

@implements IDisposable;

<PageTitle>QR</PageTitle>

<h1>QR Code</h1>

<EditForm EditContext="@EditContext" OnSubmit="@OnHandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div style="margin-bottom: 1rem">
        <FluentCard>

            <div class="d-flex flex-row" style="margin:0.5rem">
                <label style="width: 80px;">Content</label>
                <InputText style="width: 100%;" @bind-Value="@Model.Content" />
            </div>

            <div class="d-flex flex-row" style="margin:0.5rem">
                <label style="width: 80px;">Size</label>
                <FluentNumberField @bind-Value=@Model.Size></FluentNumberField>
            </div>

        </FluentCard>
    </div>

    <div style="margin-bottom: 1rem">
        <FluentCard>

            <div class="d-flex flex-row" style="margin:0.5rem">
                <label style="width: 140px;">QuietZoneSize</label>
                <label style="width: 40px;">@Model.QuietZoneSize</label>
                <input style="width: 160px;" class="mx-1" type="range" min="0" max="10" step="1" @bind-value="@Model.QuietZoneSize" />
            </div>

            <div style="margin:0.5rem">
                <label style="width: 140px;">EccLevel</label>
                <InputSelect style="width: 200px;" @bind-Value="@Model.EccLevel">
                    @foreach (var level in Enum.GetValues(typeof(ECCLevel)))
                    {
                        <option value="@level">@level</option>
                    }
                </InputSelect>
            </div>

            <div style="margin:0.5rem">
                <label style="width: 140px;">EciMode</label>
                <InputSelect style="width: 200px;" @bind-Value="@Model.EciMode">
                    @foreach (var level in Enum.GetValues(typeof(EciMode)))
                    {
                        <option value="@level">@level</option>
                    }
                </InputSelect>
            </div>

            <div style="margin:0.5rem">
                <label style="width: 140px;">ModuleShape</label>
                <InputSelect style="width: 200px;" @bind-Value="@Model.ModuleShape">
                    @foreach (var shape in Enum.GetValues(typeof(ModuleShapeType)))
                    {
                        <option value="@shape">@shape</option>
                    }
                </InputSelect>
            </div>

            @if (Model.ModuleShape == ModuleShapeType.RoundedRectangle)
            {
                <div class="d-flex flex-row" style="margin:0.5rem">
                    <label style="width: 140px;">Corner Radius</label>
                    <label style="width: 40px;">@Model.CornerRadiusPercent.ToString("F2")</label>
                    <input style="width: 160px;" class="mx-1" type="range" min="0" max="1" step="0.05" @bind-value="@Model.CornerRadiusPercent" />
                </div>
            }

            <div class="d-flex flex-row" style="margin:0.5rem">
                <label style="width: 140px;">ModuleSize</label>
                <label style="width: 40px;">@Model.ModuleSizePercent.ToString("F2")</label>
                <input style="width: 160px;" class="mx-1" type="range" min="0" max="1" step="0.05" @bind-value="@Model.ModuleSizePercent" />
            </div>

            <div style="margin:0.5rem">
                <label style="width: 140px;">ClearColor</label>
                <SKColorInputSelect style="width: 200px;" @bind-Value="@Model.ClearColor">
                    @foreach (var color in Colors)
                    {
                        <option value="@color.Value">@color.Name</option>
                    }
                </SKColorInputSelect>
            </div>

            <div style="margin:0.5rem">
                <label style="width: 140px;">CodeColor</label>
                <SKColorInputSelect style="width: 200px;" @bind-Value="@Model.CodeColor">
                    @foreach (var color in Colors)
                    {
                        <option value="@color.Value">@color.Name</option>
                    }
                </SKColorInputSelect>
            </div>

            <div style="margin:0.5rem">
                <label style="width: 140px;">BackgroundColor</label>
                <SKColorInputSelect style="width: 200px;" @bind-Value="@Model.BackgroundColor">
                    @foreach (var color in Colors)
                    {
                        <option value="@color.Value">@color.Name</option>
                    }
                </SKColorInputSelect>
            </div>

        </FluentCard>
    </div>

    <div style="margin-bottom: 1rem">
        <FluentCard>
            <h3>Icon Settings</h3>

            <div style="margin:0.5rem">
                <label style="width: 140px;">Icon File</label>
                <InputFile OnChange="@OnIconFileChanged" accept="image/*" />
                @if (IconBitmap != null)
                {
                    <button type="button" class="btn btn-sm btn-danger" @onclick="ClearIcon">Clear Icon</button>
                }
            </div>

            @if (IconBitmap != null)
            {
                <div class="d-flex flex-row" style="margin:0.5rem">
                    <label style="width: 140px;">Icon Size</label>
                    <label style="width: 40px;">@Model.IconSizePercent</label>
                    <input style="width: 160px;" class="mx-1" type="range" min="5" max="30" step="1" @bind-value="@Model.IconSizePercent" />
                </div>

                <div style="margin:0.5rem">
                    <label style="width: 140px;">Icon Border</label>
                    <label style="width: 40px;">@Model.IconBorderWidth</label>
                    <input style="width: 160px;" class="mx-1" type="range" min="0" max="10" step="1" @bind-value="@Model.IconBorderWidth" />
                </div>

                <div style="margin:0.5rem; display: flex; align-items: center;">
                    <label style="width: 140px;">Preview</label>
                    <img src="@IconPreviewUrl" style="max-width: 100px; max-height: 100px; border: 1px solid #ccc;" />
                </div>
            }
        </FluentCard>
    </div>

    <FluentCard>
        <h3>Gradient Settings</h3>
        <div style="margin:0.5rem">
            <label style="width: 140px;">Start Color</label>
            <SKColorInputSelect style="width: 200px;" @bind-Value="Model.GradientStartColor">
                @foreach (var color in Colors)
                {
                    <option value="@color.Value">@color.Name</option>
                }
            </SKColorInputSelect>
        </div>
        <div style="margin:0.5rem">
            <label style="width: 140px;">End Color</label>
            <SKColorInputSelect style="width: 200px;" @bind-Value="Model.GradientEndColor">
                @foreach (var color in Colors)
                {
                    <option value="@color.Value">@color.Name</option>
                }
            </SKColorInputSelect>
        </div>
        <div style="margin:0.5rem">
            <label style="width: 140px;">Direction</label>
            <InputSelect style="width: 200px;" @bind-Value="Model.GradientDirection">
                @foreach (var dir in Enum.GetValues(typeof(GradientDirection)))
                {
                    <option value="@dir">@dir</option>
                }
            </InputSelect>
        </div>
    </FluentCard>

    <div style="margin-bottom: 1rem">
        <button type="submit" class="btn btn-primary">Refresh</button>
    </div>

</EditForm>

<!-- SkiaSharp.Views.Blazor work on WebAssembly workload. You need `dotnet workload install wasm-tools` before run Blazor WASM. -->
<!-- When using @ref, `width=@Model.Size height=@Model.Size` ignored. Set static value instead. -->
@*<SKCanvasView width="@Model.Size" height="@Model.Size" @ref="CanvasView" OnPaintSurface="OnPaintSurfaceQr" />*@
<SKCanvasView width="2048" height="2048" @ref="CanvasView" OnPaintSurface="OnPaintSurfaceQr" />

@code {
    private EditContext EditContext { get; set; } = default!; // Autoupdate
    private QRModel Model { get; set; } = new QRModel();
    private SKCanvasView? CanvasView { get; set; }
    private (string Name, SKColor Value)[] Colors { get; set; } = default!;
    private SKBitmap? IconBitmap { get; set; }
    private string? IconPreviewUrl { get; set; }

    protected override void OnInitialized()
    {
        EditContext = new EditContext(Model);
        EditContext.OnFieldChanged += OnEditContextFiledChanged;
        Colors = typeof(SKColors)
          .GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static)
          .Select(x => (Name: x.Name, Value: (SKColor)x.GetValue(null)!))
          .ToArray();
        base.OnInitialized();
    }

    void OnEditContextFiledChanged(object? sender, FieldChangedEventArgs e)
    {
        OnHandleSubmit();
    }

    void OnHandleSubmit()
    {
        CanvasView?.Invalidate(); // re-render SKCanvasView
    }

    async Task OnIconFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                // Read file as stream
                using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5MB limit
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                // Dispose previous bitmap
                IconBitmap?.Dispose();

                // Load as SKBitmap
                IconBitmap = SKBitmap.Decode(memoryStream);

                // Create preview URL
                memoryStream.Position = 0;
                var bytes = memoryStream.ToArray();
                var base64 = Convert.ToBase64String(bytes);
                IconPreviewUrl = $"data:{file.ContentType};base64,{base64}";

                OnHandleSubmit();
            }
            catch (Exception ex)
            {
                // Handle error (you might want to show a message to the user)
                Console.WriteLine($"Error loading icon: {ex.Message}");
            }
        }
    }

    void ClearIcon()
    {
        IconBitmap?.Dispose();
        IconBitmap = null;
        IconPreviewUrl = null;
        Model.IconSizePercent = 15;
        Model.IconBorderWidth = 2;
        OnHandleSubmit();
    }

    void OnPaintSurfaceQr(SKPaintSurfaceEventArgs e)
    {
        var content = Model.Content;

        var canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.Red);

        // Generate QrCode
        var qr = QRCodeGenerator.CreateQrCode(content.AsSpan(), Model.EccLevel, eciMode: Model.EciMode, quietZoneSize: Model.QuietZoneSize);

        // Create shape
        var moduleShape = ModuleShapeFactory.Create(Model.ModuleShape, Model.CornerRadiusPercent);

        // Create icon data if icon is loaded
        IconData? iconData = null;
        if (IconBitmap != null)
        {
            iconData = new IconData
            {
                Icon = IconBitmap,
                IconSizePercent = Model.IconSizePercent,
                IconBorderWidth = Model.IconBorderWidth
            };
        }

        // Create Gradient
        GradientOptions? gradientOptions = null;
        if (Model.GradientDirection != GradientDirection.None)
        {
            gradientOptions = new GradientOptions([Model.GradientStartColor, Model.GradientEndColor], Model.GradientDirection);
        }

        // Render to canvas
        var info = new SKImageInfo(Model.Size, Model.Size); // Make sure match with SKCanvasView width & height.
        using var surface = SKSurface.Create(info);
        canvas.Render(qr, info.Width, info.Height, Model.ClearColor, Model.CodeColor, Model.BackgroundColor, iconData, moduleShape: moduleShape, moduleSizePercent: Model.ModuleSizePercent, gradientOptions: gradientOptions);
    }

    public void Dispose()
    {
        CanvasView?.Dispose();
    }

    public class QRModel
    {
        [Required]
        public string Content { get; set; } = "https://github.com/guitarrapc/SkiaSharp.QrCode";
        [Required]
        [Range(100, 4096)]
        public int Size { get; set; } = 512;
        [Range(0, 10)]
        public int QuietZoneSize { get; set; } = 4;
        public ECCLevel EccLevel { get; set; } = ECCLevel.M;
        public EciMode EciMode { get; set; } = EciMode.Default;
        public ModuleShapeType ModuleShape { get; set; } = ModuleShapeType.Rectangle;
        [Range(0.0, 1.0)]
        public float CornerRadiusPercent { get; set; } = 0.3f;
        public float ModuleSizePercent { get; set; } = 1.0f;
        [Range(5, 30)]
        public int IconSizePercent { get; set; } = 15;
        [Range(0, 10)]
        public int IconBorderWidth { get; set; } = 2;
        public SKColor ClearColor { get; set; } = SKColors.Transparent;
        public SKColor CodeColor { get; set; } = SKColors.Black;
        public SKColor BackgroundColor { get; set; } = SKColors.White;
        // gradient support
        public SKColor GradientStartColor { get; set; } = SKColors.Black;
        public SKColor GradientEndColor { get; set; } = SKColors.Black;
        public GradientDirection GradientDirection { get; set; } = GradientDirection.None;
    }

    /// <summary>
    /// Predefined module shape types.
    /// </summary>
    public enum ModuleShapeType
    {
        Rectangle,
        Circle,
        RoundedRectangle
    }

    /// <summary>
    /// Factory for creating module shapes.
    /// </summary>
    public static class ModuleShapeFactory
    {
        /// <summary>
        /// Creates a module shape from the specified type.
        /// </summary>
        public static ModuleShape Create(ModuleShapeType type, float cornerRadiusPercent = 0.3f)
        {
            return type switch
            {
                ModuleShapeType.Rectangle => RectangleModuleShape.Default,
                ModuleShapeType.Circle => CircleModuleShape.Default,
                ModuleShapeType.RoundedRectangle => new RoundedRectangleModuleShape(cornerRadiusPercent),
                _ => throw new ArgumentOutOfRangeException(nameof(type))
            };
        }
    }
}
